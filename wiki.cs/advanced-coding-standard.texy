Advanced Nette coding standard
***************

PHP
---------------------

- Odkazování na ostatní soubory v PHP skriptech musí začínat s absolutní adresou (na relativní adresu se nelze spolehnout)
  - v index.php Nette projektu jsou vytvářeny konstanty, které obsahují absolutní cestu bez lomítka na konci (APP_DIR, WWW_DIR, LIBS_DIR)
  - dá se spolehnout na konvenci, že konečné lomítko tyto a další podobně deklarované cesty nikdy neobsahují, při přístupu k souboru v dané složce či k podsložkám je za konstantu potřeba lomítko uvést:

/---code php
require_once(LIBS_DIR . '/Nette/loader.php');
\---

Třídy
-----------------------

- Vlastní třídy, které dědí od knihoven třetích stran, musí mít vlastního obecného předka s prefixem Base - např. BasePresenter, BaseForm, BaseModel
  - Je to mezivrstva, která zajistí požadované společné chování tříd v aplikaci

Presentery
------------------------

- Nikdy nepřepisovat konstruktor!
  - Vede to k neočekávatelnému chování a nefunkční aplikaci.
  - K provedení vlastního kódu co nejdříve v životním cyklu slouží metoda startup()
- K plnění proměnných do šablony slouží metody `render{Action}()`
  - V případě plnění jinde (např. v `action{Action}()`) se může v šabloně vykreslit neaktuální údaj
- Pro parametry v adrese se využívá jen a pouze parametrů action anebo persistentních parametrů
  - "Obcházení" frameworku pomocí přímého přístupu k poli `$_GET` vede k neočekávatelnému chování

Komponenty
-----------------------

- Nikdy nepřepisovat konstruktor!
  - Vede to k neočekávatelnému chování a nefunkční aplikaci.
  - Všechny parametry pro nastavení se předávají pomocí volání setterů v továrničce
- Všechny komponenty by měly být vytvářeny v továrničce (kterou umožňuje vytvořit ComponentContainer a jeho potomci; Control a Presenter):
  - Jiný přístup (např. vytváření komponenty v render metodě) vede k neočekávanému chování

/---code php
//název komponenty se nemusí rovnat názvu třídy komponenty, měl by pouze vystihovat daný "blok" v šabloně
protected function createComponentMojeKomponenta() {
	return TridaMojiKomponenty;
}
\---

- Vykreslovací metoda by se měla jmenovat `render()`, v případě, že má komponenta více podob, tak se vykreslovací metody jmenují `render{Podoba}()`, např. `renderPaginator()`
  - Umožní v šabloně volání v podobě `{widget mojeKomponenta:paginator}`

Signály
-----------------------

- Slouží k jemným změnám zobrazení Presenteru (např. řazení a stránkování)
  - Při těchto akcích se využívá privátních členů Presenteru, na jejichž změnu pak reagují render metody:

/---code php
class PagePresenter extends BasePresenter {

	private $page = 1;

	public function handlePage($page) {
		$this->page = $page;
	}

	public function renderDefault() {
		Model = new Model;
		$this->template->data = $model->getData($this->page);
	}

}
\---

- Slouží k akcím, které mění stav serveru (= mazání, hlasování, odhlašování)
  - Po těchto akcích musí následovat přesměrování, případně doplněné flash zprávičkou (= Post/Redirect/Get pattern)

Formuláře
---------------------------

- Pro využití v MVP aplikaci se využívá třída AppForm (potomek Form)
- Odesílací metody formuláře musí mít následující podobu (či simulovat shodné chování jinou cestou):

/---code php
/** v továrničce */
$form->onSubmit[] = function(AppForm $form) {
	//není potřeba se dotazovat, zdali byl formulář odeslaný a validní, jinak se tato funkce nevolá
	try {
		$values = $form->values;
		$model = new Model;

		//libovolná metoda modelu, která zajistí zpracování a uložení dat z formuláře
		$model->insert($values); //může vyhodit ModelException

		//zprávička se zobrazí po redirectu uživateli
		$this->flashMessage('Úspěšně uloženo.');

		//redirectnutí kvůli Post/Redirect/Get patternu
		$this->redirect('this'); //vyhazuje AbortException
	} catch (ModelException $e) {
		$form->addError($e->getMessage()); //zajistí zobrazení původního formuláře, s hodnotami vyplněnými uživatelem a chybovou hláškou
	}
};
\---

- Defaultní hodnoty (např. pro editaci) se nastavují v action metodě Presenteru:

/---code php
public function actionEdit($id) {
	$values = Model::find($id);
	$this['editForm']->setDefaults($values);
}
\---

Routy
------------------------------

- Routy musí být uvedeny v pořadí od nejkonkrétnější (např. `sitemap.xml`) po nejobecnější (např. `<presenter>/<action>/<id>`)
  - V tomto pořadí je aplikace matchuje a obecná routa na začátku by "skryla" ty konkrétní za ní

Šablony
-------------------------

- Všechny cesty k souborům v HTML musí začínat proměnnou $basePath (pro případ, že aplikace není v rootu domény):
  - Za toutu proměnnou je třeba uvádět lomítko, platí zde stejná konvence jako u konstant v PHP

/---code html
<script type="text/javascript" src="{$basePath}/js/jquery.js"></script>
\---